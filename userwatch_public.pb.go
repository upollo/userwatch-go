// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: userwatch_public.proto

// Protocol buffer definitions used when interacting with Userwatch's customer
// libraries.

package upollo

import (
	postaladdress "google.golang.org/genproto/googleapis/type/postaladdress"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED            EventType = 0
	EventType_EVENT_TYPE_LOGIN                  EventType = 1
	EventType_EVENT_TYPE_REGISTER               EventType = 2
	EventType_EVENT_TYPE_ATTEMPT_PURCHASE       EventType = 3
	EventType_EVENT_TYPE_COMPLETE_PURCHASE      EventType = 4
	EventType_EVENT_TYPE_ATTEMPT_REDEEM_OFFER   EventType = 5
	EventType_EVENT_TYPE_REDEEMED_OFFER         EventType = 6
	EventType_EVENT_TYPE_VERIFY_DEVICE          EventType = 7
	EventType_EVENT_TYPE_REPORT_DEVICE          EventType = 8
	EventType_EVENT_TYPE_ADD_TEAM_MEMBER        EventType = 9
	EventType_EVENT_TYPE_REMOVE_TEAM_MEMBER     EventType = 10
	EventType_EVENT_TYPE_ADD_PAYMENT_METHOD     EventType = 11
	EventType_EVENT_TYPE_ATTEMPT_DELETE_ACCOUNT EventType = 12
	EventType_EVENT_TYPE_CUSTOMER_DEFINED       EventType = 13
	EventType_EVENT_TYPE_START_SUBSCRIPTION     EventType = 14
	EventType_EVENT_TYPE_END_SUBSCRIPTION       EventType = 15
	EventType_EVENT_TYPE_HEARTBEAT              EventType = 16
	EventType_EVENT_TYPE_PAGE_VISIT             EventType = 17
	EventType_EVENT_TYPE_LOGIN_SUCCESS          EventType = 18
	EventType_EVENT_TYPE_REGISTER_SUCCESS       EventType = 19
	EventType_EVENT_TYPE_INTERNAL               EventType = 20
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "EVENT_TYPE_UNSPECIFIED",
		1:  "EVENT_TYPE_LOGIN",
		2:  "EVENT_TYPE_REGISTER",
		3:  "EVENT_TYPE_ATTEMPT_PURCHASE",
		4:  "EVENT_TYPE_COMPLETE_PURCHASE",
		5:  "EVENT_TYPE_ATTEMPT_REDEEM_OFFER",
		6:  "EVENT_TYPE_REDEEMED_OFFER",
		7:  "EVENT_TYPE_VERIFY_DEVICE",
		8:  "EVENT_TYPE_REPORT_DEVICE",
		9:  "EVENT_TYPE_ADD_TEAM_MEMBER",
		10: "EVENT_TYPE_REMOVE_TEAM_MEMBER",
		11: "EVENT_TYPE_ADD_PAYMENT_METHOD",
		12: "EVENT_TYPE_ATTEMPT_DELETE_ACCOUNT",
		13: "EVENT_TYPE_CUSTOMER_DEFINED",
		14: "EVENT_TYPE_START_SUBSCRIPTION",
		15: "EVENT_TYPE_END_SUBSCRIPTION",
		16: "EVENT_TYPE_HEARTBEAT",
		17: "EVENT_TYPE_PAGE_VISIT",
		18: "EVENT_TYPE_LOGIN_SUCCESS",
		19: "EVENT_TYPE_REGISTER_SUCCESS",
		20: "EVENT_TYPE_INTERNAL",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED":            0,
		"EVENT_TYPE_LOGIN":                  1,
		"EVENT_TYPE_REGISTER":               2,
		"EVENT_TYPE_ATTEMPT_PURCHASE":       3,
		"EVENT_TYPE_COMPLETE_PURCHASE":      4,
		"EVENT_TYPE_ATTEMPT_REDEEM_OFFER":   5,
		"EVENT_TYPE_REDEEMED_OFFER":         6,
		"EVENT_TYPE_VERIFY_DEVICE":          7,
		"EVENT_TYPE_REPORT_DEVICE":          8,
		"EVENT_TYPE_ADD_TEAM_MEMBER":        9,
		"EVENT_TYPE_REMOVE_TEAM_MEMBER":     10,
		"EVENT_TYPE_ADD_PAYMENT_METHOD":     11,
		"EVENT_TYPE_ATTEMPT_DELETE_ACCOUNT": 12,
		"EVENT_TYPE_CUSTOMER_DEFINED":       13,
		"EVENT_TYPE_START_SUBSCRIPTION":     14,
		"EVENT_TYPE_END_SUBSCRIPTION":       15,
		"EVENT_TYPE_HEARTBEAT":              16,
		"EVENT_TYPE_PAGE_VISIT":             17,
		"EVENT_TYPE_LOGIN_SUCCESS":          18,
		"EVENT_TYPE_REGISTER_SUCCESS":       19,
		"EVENT_TYPE_INTERNAL":               20,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_public_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_userwatch_public_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{0}
}

type Outcome int32

const (
	Outcome_OUTCOME_UNSPECIFIED      Outcome = 0
	Outcome_OUTCOME_DENY             Outcome = 1
	Outcome_OUTCOME_CHALLENGE        Outcome = 2
	Outcome_OUTCOME_PERMIT           Outcome = 3
	Outcome_OUTCOME_OFFER            Outcome = 4
	Outcome_OUTCOME_LOG              Outcome = 5
	Outcome_OUTCOME_CUSTOMER_DEFINED Outcome = 6
)

// Enum value maps for Outcome.
var (
	Outcome_name = map[int32]string{
		0: "OUTCOME_UNSPECIFIED",
		1: "OUTCOME_DENY",
		2: "OUTCOME_CHALLENGE",
		3: "OUTCOME_PERMIT",
		4: "OUTCOME_OFFER",
		5: "OUTCOME_LOG",
		6: "OUTCOME_CUSTOMER_DEFINED",
	}
	Outcome_value = map[string]int32{
		"OUTCOME_UNSPECIFIED":      0,
		"OUTCOME_DENY":             1,
		"OUTCOME_CHALLENGE":        2,
		"OUTCOME_PERMIT":           3,
		"OUTCOME_OFFER":            4,
		"OUTCOME_LOG":              5,
		"OUTCOME_CUSTOMER_DEFINED": 6,
	}
)

func (x Outcome) Enum() *Outcome {
	p := new(Outcome)
	*p = x
	return p
}

func (x Outcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Outcome) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_public_proto_enumTypes[1].Descriptor()
}

func (Outcome) Type() protoreflect.EnumType {
	return &file_userwatch_public_proto_enumTypes[1]
}

func (x Outcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Outcome.Descriptor instead.
func (Outcome) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{1}
}

// protolint:disable ENUM_FIELD_NAMES_PREFIX
type FlagType int32

const (
	FlagType_FLAG_TYPE_UNSPECIFIED FlagType = 0
	// ACCOUNT_SHARING indicates that the same account is being shared by
	// multiple people, typically on multiple devices.
	FlagType_ACCOUNT_SHARING                FlagType = 1
	FlagType_ACCOUNT_SHARING_SAME_HOUSEHOLD FlagType = 2
	FlagType_SUSPECTED_ACCOUNT_COMPROMISE   FlagType = 3
	FlagType_CREDENTIAL_STUFFING            FlagType = 4
	FlagType_REPEATED_REDEMPTION            FlagType = 5
	FlagType_SUSPECTED_FRAUD                FlagType = 6
	// REPEATED_SIGNUP indicates if the current event type is
	// EventType_EVENT_TYPE_REGISTER and there has previously
	// been an event of that type from this device or the email/phone
	// has already been used.
	FlagType_REPEATED_SIGNUP                 FlagType = 7
	FlagType_SUSPECTED_BOT                   FlagType = 8
	FlagType_RATE_LIMITED_IP                 FlagType = 9
	FlagType_RATE_LIMITED_DEVICE             FlagType = 10
	FlagType_BLACKLISTED_IP                  FlagType = 11
	FlagType_BLACKLISTED_DEVICE              FlagType = 12 // DEPRECATED
	FlagType_ACCOUNT_COMPROMISE_NEW_LOCATION FlagType = 13
	FlagType_ACCOUNT_COMPROMISE_NEW_DEVICE   FlagType = 14
	FlagType_DISPOSABLE_EMAIL                FlagType = 16
	FlagType_USING_VPN                       FlagType = 17
	FlagType_USING_TOR                       FlagType = 18
	FlagType_DEVICE_BLOCKED_GLOBALLY         FlagType = 19
	FlagType_DEVICE_BLOCKED_FOR_THIS_USER    FlagType = 20
	FlagType_INVALID_EMAIL                   FlagType = 21
	FlagType_INVALID_PHONE_NUMBER            FlagType = 23
	FlagType_INVALID_PHONE_TYPE              FlagType = 22
	// MULTIPLE_ACCOUNTS indicates that the same person is using multiple accounts
	// typically on the same device.
	FlagType_MULTIPLE_ACCOUNTS  FlagType = 24
	FlagType_ALREADY_USED_EMAIL FlagType = 25
	FlagType_ALREADY_USED_PHONE FlagType = 26
)

// Enum value maps for FlagType.
var (
	FlagType_name = map[int32]string{
		0:  "FLAG_TYPE_UNSPECIFIED",
		1:  "ACCOUNT_SHARING",
		2:  "ACCOUNT_SHARING_SAME_HOUSEHOLD",
		3:  "SUSPECTED_ACCOUNT_COMPROMISE",
		4:  "CREDENTIAL_STUFFING",
		5:  "REPEATED_REDEMPTION",
		6:  "SUSPECTED_FRAUD",
		7:  "REPEATED_SIGNUP",
		8:  "SUSPECTED_BOT",
		9:  "RATE_LIMITED_IP",
		10: "RATE_LIMITED_DEVICE",
		11: "BLACKLISTED_IP",
		12: "BLACKLISTED_DEVICE",
		13: "ACCOUNT_COMPROMISE_NEW_LOCATION",
		14: "ACCOUNT_COMPROMISE_NEW_DEVICE",
		16: "DISPOSABLE_EMAIL",
		17: "USING_VPN",
		18: "USING_TOR",
		19: "DEVICE_BLOCKED_GLOBALLY",
		20: "DEVICE_BLOCKED_FOR_THIS_USER",
		21: "INVALID_EMAIL",
		23: "INVALID_PHONE_NUMBER",
		22: "INVALID_PHONE_TYPE",
		24: "MULTIPLE_ACCOUNTS",
		25: "ALREADY_USED_EMAIL",
		26: "ALREADY_USED_PHONE",
	}
	FlagType_value = map[string]int32{
		"FLAG_TYPE_UNSPECIFIED":           0,
		"ACCOUNT_SHARING":                 1,
		"ACCOUNT_SHARING_SAME_HOUSEHOLD":  2,
		"SUSPECTED_ACCOUNT_COMPROMISE":    3,
		"CREDENTIAL_STUFFING":             4,
		"REPEATED_REDEMPTION":             5,
		"SUSPECTED_FRAUD":                 6,
		"REPEATED_SIGNUP":                 7,
		"SUSPECTED_BOT":                   8,
		"RATE_LIMITED_IP":                 9,
		"RATE_LIMITED_DEVICE":             10,
		"BLACKLISTED_IP":                  11,
		"BLACKLISTED_DEVICE":              12,
		"ACCOUNT_COMPROMISE_NEW_LOCATION": 13,
		"ACCOUNT_COMPROMISE_NEW_DEVICE":   14,
		"DISPOSABLE_EMAIL":                16,
		"USING_VPN":                       17,
		"USING_TOR":                       18,
		"DEVICE_BLOCKED_GLOBALLY":         19,
		"DEVICE_BLOCKED_FOR_THIS_USER":    20,
		"INVALID_EMAIL":                   21,
		"INVALID_PHONE_NUMBER":            23,
		"INVALID_PHONE_TYPE":              22,
		"MULTIPLE_ACCOUNTS":               24,
		"ALREADY_USED_EMAIL":              25,
		"ALREADY_USED_PHONE":              26,
	}
)

func (x FlagType) Enum() *FlagType {
	p := new(FlagType)
	*p = x
	return p
}

func (x FlagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlagType) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_public_proto_enumTypes[2].Descriptor()
}

func (FlagType) Type() protoreflect.EnumType {
	return &file_userwatch_public_proto_enumTypes[2]
}

func (x FlagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlagType.Descriptor instead.
func (FlagType) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{2}
}

type AddressType int32

const (
	AddressType_ADDRESS_TYPE_UNSPECIFIED AddressType = 0
	AddressType_ADDRESS_TYPE_HOME        AddressType = 1
	AddressType_ADDRESS_TYPE_WORK        AddressType = 2
	AddressType_ADDRESS_TYPE_OTHER       AddressType = 3
)

// Enum value maps for AddressType.
var (
	AddressType_name = map[int32]string{
		0: "ADDRESS_TYPE_UNSPECIFIED",
		1: "ADDRESS_TYPE_HOME",
		2: "ADDRESS_TYPE_WORK",
		3: "ADDRESS_TYPE_OTHER",
	}
	AddressType_value = map[string]int32{
		"ADDRESS_TYPE_UNSPECIFIED": 0,
		"ADDRESS_TYPE_HOME":        1,
		"ADDRESS_TYPE_WORK":        2,
		"ADDRESS_TYPE_OTHER":       3,
	}
)

func (x AddressType) Enum() *AddressType {
	p := new(AddressType)
	*p = x
	return p
}

func (x AddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_public_proto_enumTypes[3].Descriptor()
}

func (AddressType) Type() protoreflect.EnumType {
	return &file_userwatch_public_proto_enumTypes[3]
}

func (x AddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressType.Descriptor instead.
func (AddressType) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{3}
}

type DeviceClass int32

const (
	// protolint:disable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
	DeviceClass_DEVICE_CLASS_DESKTOP DeviceClass = 0
	// protolint:enable ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
	DeviceClass_DEVICE_CLASS_MOBILE  DeviceClass = 1
	DeviceClass_DEVICE_CLASS_TABLET  DeviceClass = 2
	DeviceClass_DEVICE_CLASS_GOODBOT DeviceClass = 3
	DeviceClass_DEVICE_CLASS_BADBOT  DeviceClass = 4
	DeviceClass_DEVICE_CLASS_UNKNOWN DeviceClass = 5
)

// Enum value maps for DeviceClass.
var (
	DeviceClass_name = map[int32]string{
		0: "DEVICE_CLASS_DESKTOP",
		1: "DEVICE_CLASS_MOBILE",
		2: "DEVICE_CLASS_TABLET",
		3: "DEVICE_CLASS_GOODBOT",
		4: "DEVICE_CLASS_BADBOT",
		5: "DEVICE_CLASS_UNKNOWN",
	}
	DeviceClass_value = map[string]int32{
		"DEVICE_CLASS_DESKTOP": 0,
		"DEVICE_CLASS_MOBILE":  1,
		"DEVICE_CLASS_TABLET":  2,
		"DEVICE_CLASS_GOODBOT": 3,
		"DEVICE_CLASS_BADBOT":  4,
		"DEVICE_CLASS_UNKNOWN": 5,
	}
)

func (x DeviceClass) Enum() *DeviceClass {
	p := new(DeviceClass)
	*p = x
	return p
}

func (x DeviceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_public_proto_enumTypes[4].Descriptor()
}

func (DeviceClass) Type() protoreflect.EnumType {
	return &file_userwatch_public_proto_enumTypes[4]
}

func (x DeviceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceClass.Descriptor instead.
func (DeviceClass) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{4}
}

type ChallengeType int32

const (
	ChallengeType_CHALLENGE_TYPE_UNSPECIFIED ChallengeType = 0
	ChallengeType_CHALLENGE_TYPE_WEBAUTHN    ChallengeType = 1
	ChallengeType_CHALLENGE_TYPE_SMS         ChallengeType = 2
	ChallengeType_CHALLENGE_TYPE_EMAIL       ChallengeType = 3
	ChallengeType_CHALLENGE_TYPE_BANKSY      ChallengeType = 4
)

// Enum value maps for ChallengeType.
var (
	ChallengeType_name = map[int32]string{
		0: "CHALLENGE_TYPE_UNSPECIFIED",
		1: "CHALLENGE_TYPE_WEBAUTHN",
		2: "CHALLENGE_TYPE_SMS",
		3: "CHALLENGE_TYPE_EMAIL",
		4: "CHALLENGE_TYPE_BANKSY",
	}
	ChallengeType_value = map[string]int32{
		"CHALLENGE_TYPE_UNSPECIFIED": 0,
		"CHALLENGE_TYPE_WEBAUTHN":    1,
		"CHALLENGE_TYPE_SMS":         2,
		"CHALLENGE_TYPE_EMAIL":       3,
		"CHALLENGE_TYPE_BANKSY":      4,
	}
)

func (x ChallengeType) Enum() *ChallengeType {
	p := new(ChallengeType)
	*p = x
	return p
}

func (x ChallengeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeType) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_public_proto_enumTypes[5].Descriptor()
}

func (ChallengeType) Type() protoreflect.EnumType {
	return &file_userwatch_public_proto_enumTypes[5]
}

func (x ChallengeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeType.Descriptor instead.
func (ChallengeType) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{5}
}

type EmailInvalidReason int32

const (
	EmailInvalidReason_EMAIL_INVALID_REASON_UNSPECIFIED    EmailInvalidReason = 0
	EmailInvalidReason_EMAIL_INVALID_REASON_FORMAT         EmailInvalidReason = 1
	EmailInvalidReason_EMAIL_INVALID_REASON_INVALID_DOMAIN EmailInvalidReason = 2
	EmailInvalidReason_EMAIL_INVALID_REASON_DISPOSABLE     EmailInvalidReason = 3
	EmailInvalidReason_EMAIL_INVALID_REASON_INVALID_USER   EmailInvalidReason = 4
)

// Enum value maps for EmailInvalidReason.
var (
	EmailInvalidReason_name = map[int32]string{
		0: "EMAIL_INVALID_REASON_UNSPECIFIED",
		1: "EMAIL_INVALID_REASON_FORMAT",
		2: "EMAIL_INVALID_REASON_INVALID_DOMAIN",
		3: "EMAIL_INVALID_REASON_DISPOSABLE",
		4: "EMAIL_INVALID_REASON_INVALID_USER",
	}
	EmailInvalidReason_value = map[string]int32{
		"EMAIL_INVALID_REASON_UNSPECIFIED":    0,
		"EMAIL_INVALID_REASON_FORMAT":         1,
		"EMAIL_INVALID_REASON_INVALID_DOMAIN": 2,
		"EMAIL_INVALID_REASON_DISPOSABLE":     3,
		"EMAIL_INVALID_REASON_INVALID_USER":   4,
	}
)

func (x EmailInvalidReason) Enum() *EmailInvalidReason {
	p := new(EmailInvalidReason)
	*p = x
	return p
}

func (x EmailInvalidReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmailInvalidReason) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_public_proto_enumTypes[6].Descriptor()
}

func (EmailInvalidReason) Type() protoreflect.EnumType {
	return &file_userwatch_public_proto_enumTypes[6]
}

func (x EmailInvalidReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmailInvalidReason.Descriptor instead.
func (EmailInvalidReason) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{6}
}

type EmailType int32

const (
	EmailType_EMAIL_TYPE_UNSPECIFIED EmailType = 0
	EmailType_EMAIL_TYPE_PUBLIC      EmailType = 1
	EmailType_EMAIL_TYPE_DISPOSABLE  EmailType = 2
	EmailType_EMAIL_TYPE_COMPANY     EmailType = 3
	EmailType_EMAIL_TYPE_OTHER       EmailType = 4
	EmailType_EMAIL_TYPE_EDUCATION   EmailType = 5
	EmailType_EMAIL_TYPE_NFP         EmailType = 6
)

// Enum value maps for EmailType.
var (
	EmailType_name = map[int32]string{
		0: "EMAIL_TYPE_UNSPECIFIED",
		1: "EMAIL_TYPE_PUBLIC",
		2: "EMAIL_TYPE_DISPOSABLE",
		3: "EMAIL_TYPE_COMPANY",
		4: "EMAIL_TYPE_OTHER",
		5: "EMAIL_TYPE_EDUCATION",
		6: "EMAIL_TYPE_NFP",
	}
	EmailType_value = map[string]int32{
		"EMAIL_TYPE_UNSPECIFIED": 0,
		"EMAIL_TYPE_PUBLIC":      1,
		"EMAIL_TYPE_DISPOSABLE":  2,
		"EMAIL_TYPE_COMPANY":     3,
		"EMAIL_TYPE_OTHER":       4,
		"EMAIL_TYPE_EDUCATION":   5,
		"EMAIL_TYPE_NFP":         6,
	}
)

func (x EmailType) Enum() *EmailType {
	p := new(EmailType)
	*p = x
	return p
}

func (x EmailType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EmailType) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_public_proto_enumTypes[7].Descriptor()
}

func (EmailType) Type() protoreflect.EnumType {
	return &file_userwatch_public_proto_enumTypes[7]
}

func (x EmailType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EmailType.Descriptor instead.
func (EmailType) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{7}
}

type PhoneLineType int32

const (
	PhoneLineType_PHONE_LINE_TYPE_UNSPECIFIED PhoneLineType = 0
	PhoneLineType_PHONE_LINE_TYPE_MOBILE      PhoneLineType = 1
	PhoneLineType_PHONE_LINE_TYPE_LANDLINE    PhoneLineType = 2
	PhoneLineType_PHONE_LINE_TYPE_VOIP        PhoneLineType = 3
	PhoneLineType_PHONE_LINE_TYPE_INVALID     PhoneLineType = 4
	PhoneLineType_PHONE_LINE_TYPE_PREPAID     PhoneLineType = 5
	PhoneLineType_PHONE_LINE_TYPE_OTHER       PhoneLineType = 6
)

// Enum value maps for PhoneLineType.
var (
	PhoneLineType_name = map[int32]string{
		0: "PHONE_LINE_TYPE_UNSPECIFIED",
		1: "PHONE_LINE_TYPE_MOBILE",
		2: "PHONE_LINE_TYPE_LANDLINE",
		3: "PHONE_LINE_TYPE_VOIP",
		4: "PHONE_LINE_TYPE_INVALID",
		5: "PHONE_LINE_TYPE_PREPAID",
		6: "PHONE_LINE_TYPE_OTHER",
	}
	PhoneLineType_value = map[string]int32{
		"PHONE_LINE_TYPE_UNSPECIFIED": 0,
		"PHONE_LINE_TYPE_MOBILE":      1,
		"PHONE_LINE_TYPE_LANDLINE":    2,
		"PHONE_LINE_TYPE_VOIP":        3,
		"PHONE_LINE_TYPE_INVALID":     4,
		"PHONE_LINE_TYPE_PREPAID":     5,
		"PHONE_LINE_TYPE_OTHER":       6,
	}
)

func (x PhoneLineType) Enum() *PhoneLineType {
	p := new(PhoneLineType)
	*p = x
	return p
}

func (x PhoneLineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneLineType) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_public_proto_enumTypes[8].Descriptor()
}

func (PhoneLineType) Type() protoreflect.EnumType {
	return &file_userwatch_public_proto_enumTypes[8]
}

func (x PhoneLineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhoneLineType.Descriptor instead.
func (PhoneLineType) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{8}
}

type PhoneInvalidReason int32

const (
	PhoneInvalidReason_PHONE_INVALID_REASON_UNSPECIFIED      PhoneInvalidReason = 0
	PhoneInvalidReason_PHONE_INVALID_REASON_NUMBER_FORMAT    PhoneInvalidReason = 1
	PhoneInvalidReason_PHONE_INVALID_REASON_INACTIVE_LINE    PhoneInvalidReason = 2
	PhoneInvalidReason_PHONE_INVALID_REASON_VOIP             PhoneInvalidReason = 3
	PhoneInvalidReason_PHONE_INVALID_REASON_INVALID_TYPE     PhoneInvalidReason = 4
	PhoneInvalidReason_PHONE_INVALID_REASON_DISPOSABLE_PHONE PhoneInvalidReason = 5
)

// Enum value maps for PhoneInvalidReason.
var (
	PhoneInvalidReason_name = map[int32]string{
		0: "PHONE_INVALID_REASON_UNSPECIFIED",
		1: "PHONE_INVALID_REASON_NUMBER_FORMAT",
		2: "PHONE_INVALID_REASON_INACTIVE_LINE",
		3: "PHONE_INVALID_REASON_VOIP",
		4: "PHONE_INVALID_REASON_INVALID_TYPE",
		5: "PHONE_INVALID_REASON_DISPOSABLE_PHONE",
	}
	PhoneInvalidReason_value = map[string]int32{
		"PHONE_INVALID_REASON_UNSPECIFIED":      0,
		"PHONE_INVALID_REASON_NUMBER_FORMAT":    1,
		"PHONE_INVALID_REASON_INACTIVE_LINE":    2,
		"PHONE_INVALID_REASON_VOIP":             3,
		"PHONE_INVALID_REASON_INVALID_TYPE":     4,
		"PHONE_INVALID_REASON_DISPOSABLE_PHONE": 5,
	}
)

func (x PhoneInvalidReason) Enum() *PhoneInvalidReason {
	p := new(PhoneInvalidReason)
	*p = x
	return p
}

func (x PhoneInvalidReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneInvalidReason) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_public_proto_enumTypes[9].Descriptor()
}

func (PhoneInvalidReason) Type() protoreflect.EnumType {
	return &file_userwatch_public_proto_enumTypes[9]
}

func (x PhoneInvalidReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhoneInvalidReason.Descriptor instead.
func (PhoneInvalidReason) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{9}
}

type NullableBool int32

const (
	NullableBool_NULLABLE_BOOL_UNSPECIFIED NullableBool = 0
	NullableBool_NULLABLE_BOOL_FALSE       NullableBool = 1
	NullableBool_NULLABLE_BOOL_TRUE        NullableBool = 2
)

// Enum value maps for NullableBool.
var (
	NullableBool_name = map[int32]string{
		0: "NULLABLE_BOOL_UNSPECIFIED",
		1: "NULLABLE_BOOL_FALSE",
		2: "NULLABLE_BOOL_TRUE",
	}
	NullableBool_value = map[string]int32{
		"NULLABLE_BOOL_UNSPECIFIED": 0,
		"NULLABLE_BOOL_FALSE":       1,
		"NULLABLE_BOOL_TRUE":        2,
	}
)

func (x NullableBool) Enum() *NullableBool {
	p := new(NullableBool)
	*p = x
	return p
}

func (x NullableBool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NullableBool) Descriptor() protoreflect.EnumDescriptor {
	return file_userwatch_public_proto_enumTypes[10].Descriptor()
}

func (NullableBool) Type() protoreflect.EnumType {
	return &file_userwatch_public_proto_enumTypes[10]
}

func (x NullableBool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NullableBool.Descriptor instead.
func (NullableBool) EnumDescriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{10}
}

type AnalysisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Recommended action based on the Userwatch analysis.
	Action Outcome `protobuf:"varint,1,opt,name=action,proto3,enum=uwproto.Outcome" json:"action,omitempty"`
	// All flags the Userwatch analysis identified.
	// Note any flags with an ignored_until value after the present should
	// generally be treated as if they were not present. Those ignored flags are
	// already excluded from factoring into the action Outcome above.
	Flags []*Flag `protobuf:"bytes,6,rep,name=flags,proto3" json:"flags,omitempty"`
	// True if Userwatch detects a VPN is being used.
	// Deprecated: This is available as in flags as type USING_VPN
	//
	// Deprecated: Do not use.
	IsUsingVpn bool `protobuf:"varint,3,opt,name=is_using_vpn,json=isUsingVpn,proto3" json:"is_using_vpn,omitempty"`
	// True if Userwatch detects TOR is being used.
	// Deprecated: This is available in flags as type USING_TOR
	//
	// Deprecated: Do not use.
	IsUsingTor bool `protobuf:"varint,4,opt,name=is_using_tor,json=isUsingTor,proto3" json:"is_using_tor,omitempty"`
	// Information Userwatch discerned about the user.
	UserInfo *UserInfo `protobuf:"bytes,7,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	// Information Userwatch discerned about the device.
	DeviceInfo *DeviceInfo `protobuf:"bytes,8,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	// Geographic information discerned by Userwatch.
	GeoInfo             *GeoInfo        `protobuf:"bytes,9,opt,name=geo_info,json=geoInfo,proto3" json:"geo_info,omitempty"`
	SupportedChallenges []ChallengeType `protobuf:"varint,11,rep,packed,name=supported_challenges,json=supportedChallenges,proto3,enum=uwproto.ChallengeType" json:"supported_challenges,omitempty"`
	// Unique identifier of the request which resulted in this analysis.
	RequestId string `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Event type which resulted in this analysis being done.
	EventType     EventType           `protobuf:"varint,12,opt,name=event_type,json=eventType,proto3,enum=uwproto.EventType" json:"event_type,omitempty"`
	EmailAnalysis *CheckEmailResponse `protobuf:"bytes,13,opt,name=email_analysis,json=emailAnalysis,proto3" json:"email_analysis,omitempty"`
	PhoneAnalysis *CheckPhoneResponse `protobuf:"bytes,14,opt,name=phone_analysis,json=phoneAnalysis,proto3" json:"phone_analysis,omitempty"`
}

func (x *AnalysisResponse) Reset() {
	*x = AnalysisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisResponse) ProtoMessage() {}

func (x *AnalysisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisResponse.ProtoReflect.Descriptor instead.
func (*AnalysisResponse) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{0}
}

func (x *AnalysisResponse) GetAction() Outcome {
	if x != nil {
		return x.Action
	}
	return Outcome_OUTCOME_UNSPECIFIED
}

func (x *AnalysisResponse) GetFlags() []*Flag {
	if x != nil {
		return x.Flags
	}
	return nil
}

// Deprecated: Do not use.
func (x *AnalysisResponse) GetIsUsingVpn() bool {
	if x != nil {
		return x.IsUsingVpn
	}
	return false
}

// Deprecated: Do not use.
func (x *AnalysisResponse) GetIsUsingTor() bool {
	if x != nil {
		return x.IsUsingTor
	}
	return false
}

func (x *AnalysisResponse) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *AnalysisResponse) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *AnalysisResponse) GetGeoInfo() *GeoInfo {
	if x != nil {
		return x.GeoInfo
	}
	return nil
}

func (x *AnalysisResponse) GetSupportedChallenges() []ChallengeType {
	if x != nil {
		return x.SupportedChallenges
	}
	return nil
}

func (x *AnalysisResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *AnalysisResponse) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_UNSPECIFIED
}

func (x *AnalysisResponse) GetEmailAnalysis() *CheckEmailResponse {
	if x != nil {
		return x.EmailAnalysis
	}
	return nil
}

func (x *AnalysisResponse) GetPhoneAnalysis() *CheckPhoneResponse {
	if x != nil {
		return x.PhoneAnalysis
	}
	return nil
}

type EventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A token which can be sent to your own server so it can dig into the
	// assessment of a user following events being reported for tracking by
	// your client application.
	EventToken string `protobuf:"bytes,1,opt,name=event_token,json=eventToken,proto3" json:"event_token,omitempty"`
}

func (x *EventResponse) Reset() {
	*x = EventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventResponse) ProtoMessage() {}

func (x *EventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventResponse.ProtoReflect.Descriptor instead.
func (*EventResponse) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{1}
}

func (x *EventResponse) GetEventToken() string {
	if x != nil {
		return x.EventToken
	}
	return ""
}

type Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                FlagType               `protobuf:"varint,1,opt,name=type,proto3,enum=uwproto.FlagType" json:"type,omitempty"`
	FirstFlagged        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=first_flagged,json=firstFlagged,proto3" json:"first_flagged,omitempty"`
	MostRecentlyFlagged *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=most_recently_flagged,json=mostRecentlyFlagged,proto3" json:"most_recently_flagged,omitempty"`
	// A nil ignored_until value, or a non-nil value before the present, means
	// this flag is set and should be treated accordingly.
	// A non-nil ignored_until value which is after the present indicates this
	// flag is set, but should be ignored — i.e. treated as if not flagged.
	// The max time further indicates that the flag should be ignored forever.
	IgnoredUntil *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ignored_until,json=ignoredUntil,proto3" json:"ignored_until,omitempty"`
}

func (x *Flag) Reset() {
	*x = Flag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag) ProtoMessage() {}

func (x *Flag) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag.ProtoReflect.Descriptor instead.
func (*Flag) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{2}
}

func (x *Flag) GetType() FlagType {
	if x != nil {
		return x.Type
	}
	return FlagType_FLAG_TYPE_UNSPECIFIED
}

func (x *Flag) GetFirstFlagged() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstFlagged
	}
	return nil
}

func (x *Flag) GetMostRecentlyFlagged() *timestamppb.Timestamp {
	if x != nil {
		return x.MostRecentlyFlagged
	}
	return nil
}

func (x *Flag) GetIgnoredUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.IgnoredUntil
	}
	return nil
}

type Flags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags []*Flag `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Flags) Reset() {
	*x = Flags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flags) ProtoMessage() {}

func (x *Flags) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flags.ProtoReflect.Descriptor instead.
func (*Flags) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{3}
}

func (x *Flags) GetFlags() []*Flag {
	if x != nil {
		return x.Flags
	}
	return nil
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                 string            `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserEmail              string            `protobuf:"bytes,2,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	UserPhone              string            `protobuf:"bytes,3,opt,name=user_phone,json=userPhone,proto3" json:"user_phone,omitempty"`
	UserName               string            `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserImage              string            `protobuf:"bytes,5,opt,name=user_image,json=userImage,proto3" json:"user_image,omitempty"`
	CustomerSuppliedValues map[string]string `protobuf:"bytes,6,rep,name=customer_supplied_values,json=customerSuppliedValues,proto3" json:"customer_supplied_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Address information, this would typically be shipping or home address
	Addresses []*PhysicalAddress `protobuf:"bytes,7,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{4}
}

func (x *UserInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserInfo) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UserInfo) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *UserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfo) GetUserImage() string {
	if x != nil {
		return x.UserImage
	}
	return ""
}

func (x *UserInfo) GetCustomerSuppliedValues() map[string]string {
	if x != nil {
		return x.CustomerSuppliedValues
	}
	return nil
}

func (x *UserInfo) GetAddresses() []*PhysicalAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type PhysicalAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    AddressType                  `protobuf:"varint,1,opt,name=type,proto3,enum=uwproto.AddressType" json:"type,omitempty"`
	Address *postaladdress.PostalAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *PhysicalAddress) Reset() {
	*x = PhysicalAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalAddress) ProtoMessage() {}

func (x *PhysicalAddress) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalAddress.ProtoReflect.Descriptor instead.
func (*PhysicalAddress) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{5}
}

func (x *PhysicalAddress) GetType() AddressType {
	if x != nil {
		return x.Type
	}
	return AddressType_ADDRESS_TYPE_UNSPECIFIED
}

func (x *PhysicalAddress) GetAddress() *postaladdress.PostalAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId        string                 `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Os              string                 `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	DeviceClass     DeviceClass            `protobuf:"varint,3,opt,name=device_class,json=deviceClass,proto3,enum=uwproto.DeviceClass" json:"device_class,omitempty"`
	DeviceName      string                 `protobuf:"bytes,4,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	UserAgent       string                 `protobuf:"bytes,5,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Browser         string                 `protobuf:"bytes,6,opt,name=browser,proto3" json:"browser,omitempty"`
	LastUsed        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"`
	BlockedGlobally bool                   `protobuf:"varint,8,opt,name=blocked_globally,json=blockedGlobally,proto3" json:"blocked_globally,omitempty"`
	// Will always be false if request is unrelated to a single user
	BlockedForThisUser bool `protobuf:"varint,9,opt,name=blocked_for_this_user,json=blockedForThisUser,proto3" json:"blocked_for_this_user,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceInfo) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *DeviceInfo) GetDeviceClass() DeviceClass {
	if x != nil {
		return x.DeviceClass
	}
	return DeviceClass_DEVICE_CLASS_DESKTOP
}

func (x *DeviceInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfo) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *DeviceInfo) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *DeviceInfo) GetLastUsed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsed
	}
	return nil
}

func (x *DeviceInfo) GetBlockedGlobally() bool {
	if x != nil {
		return x.BlockedGlobally
	}
	return false
}

func (x *DeviceInfo) GetBlockedForThisUser() bool {
	if x != nil {
		return x.BlockedForThisUser
	}
	return false
}

type GeoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoIpLatlng    *LatLng                `protobuf:"bytes,1,opt,name=geo_ip_latlng,json=geoIpLatlng,proto3" json:"geo_ip_latlng,omitempty"`
	GeoIpCity      string                 `protobuf:"bytes,2,opt,name=geo_ip_city,json=geoIpCity,proto3" json:"geo_ip_city,omitempty"`
	GeoIpSubregion string                 `protobuf:"bytes,3,opt,name=geo_ip_subregion,json=geoIpSubregion,proto3" json:"geo_ip_subregion,omitempty"`
	GeoIpRegion    string                 `protobuf:"bytes,4,opt,name=geo_ip_region,json=geoIpRegion,proto3" json:"geo_ip_region,omitempty"`
	LastHere       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_here,json=lastHere,proto3" json:"last_here,omitempty"`
}

func (x *GeoInfo) Reset() {
	*x = GeoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoInfo) ProtoMessage() {}

func (x *GeoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoInfo.ProtoReflect.Descriptor instead.
func (*GeoInfo) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{7}
}

func (x *GeoInfo) GetGeoIpLatlng() *LatLng {
	if x != nil {
		return x.GeoIpLatlng
	}
	return nil
}

func (x *GeoInfo) GetGeoIpCity() string {
	if x != nil {
		return x.GeoIpCity
	}
	return ""
}

func (x *GeoInfo) GetGeoIpSubregion() string {
	if x != nil {
		return x.GeoIpSubregion
	}
	return ""
}

func (x *GeoInfo) GetGeoIpRegion() string {
	if x != nil {
		return x.GeoIpRegion
	}
	return ""
}

func (x *GeoInfo) GetLastHere() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHere
	}
	return nil
}

type LatLng struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The latitude in degrees. It must be in the range [-90.0, +90.0].
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// The longitude in degrees. It must be in the range [-180.0, +180.0].
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *LatLng) Reset() {
	*x = LatLng{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatLng) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatLng) ProtoMessage() {}

func (x *LatLng) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatLng.ProtoReflect.Descriptor instead.
func (*LatLng) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{8}
}

func (x *LatLng) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LatLng) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EventType:
	//
	//	*Event_EventTypeEnum
	//	*Event_CustomerDefinedEventType
	EventType isEvent_EventType      `protobuf_oneof:"event_type"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{9}
}

func (m *Event) GetEventType() isEvent_EventType {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (x *Event) GetEventTypeEnum() EventType {
	if x, ok := x.GetEventType().(*Event_EventTypeEnum); ok {
		return x.EventTypeEnum
	}
	return EventType_EVENT_TYPE_UNSPECIFIED
}

func (x *Event) GetCustomerDefinedEventType() string {
	if x, ok := x.GetEventType().(*Event_CustomerDefinedEventType); ok {
		return x.CustomerDefinedEventType
	}
	return ""
}

func (x *Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type isEvent_EventType interface {
	isEvent_EventType()
}

type Event_EventTypeEnum struct {
	EventTypeEnum EventType `protobuf:"varint,1,opt,name=event_type_enum,json=eventTypeEnum,proto3,enum=uwproto.EventType,oneof"`
}

type Event_CustomerDefinedEventType struct {
	CustomerDefinedEventType string `protobuf:"bytes,2,opt,name=customer_defined_event_type,json=customerDefinedEventType,proto3,oneof"`
}

func (*Event_EventTypeEnum) isEvent_EventType() {}

func (*Event_CustomerDefinedEventType) isEvent_EventType() {}

type CheckEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid     bool               `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Reason    EmailInvalidReason `protobuf:"varint,2,opt,name=reason,proto3,enum=uwproto.EmailInvalidReason" json:"reason,omitempty"`
	EmailType EmailType          `protobuf:"varint,3,opt,name=email_type,json=emailType,proto3,enum=uwproto.EmailType" json:"email_type,omitempty"`
	Company   *CompanyData       `protobuf:"bytes,4,opt,name=company,proto3" json:"company,omitempty"`
}

func (x *CheckEmailResponse) Reset() {
	*x = CheckEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckEmailResponse) ProtoMessage() {}

func (x *CheckEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckEmailResponse.ProtoReflect.Descriptor instead.
func (*CheckEmailResponse) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{10}
}

func (x *CheckEmailResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *CheckEmailResponse) GetReason() EmailInvalidReason {
	if x != nil {
		return x.Reason
	}
	return EmailInvalidReason_EMAIL_INVALID_REASON_UNSPECIFIED
}

func (x *CheckEmailResponse) GetEmailType() EmailType {
	if x != nil {
		return x.EmailType
	}
	return EmailType_EMAIL_TYPE_UNSPECIFIED
}

func (x *CheckEmailResponse) GetCompany() *CompanyData {
	if x != nil {
		return x.Company
	}
	return nil
}

type CheckPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Compromised bool `protobuf:"varint,1,opt,name=compromised,proto3" json:"compromised,omitempty"`
}

func (x *CheckPasswordResponse) Reset() {
	*x = CheckPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPasswordResponse) ProtoMessage() {}

func (x *CheckPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPasswordResponse.ProtoReflect.Descriptor instead.
func (*CheckPasswordResponse) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{11}
}

func (x *CheckPasswordResponse) GetCompromised() bool {
	if x != nil {
		return x.Compromised
	}
	return false
}

type CheckPhoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid       bool               `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Reason      PhoneInvalidReason `protobuf:"varint,2,opt,name=reason,proto3,enum=uwproto.PhoneInvalidReason" json:"reason,omitempty"`
	CountryCode string             `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	LineType    PhoneLineType      `protobuf:"varint,4,opt,name=line_type,json=lineType,proto3,enum=uwproto.PhoneLineType" json:"line_type,omitempty"`
	Carrier     string             `protobuf:"bytes,5,opt,name=carrier,proto3" json:"carrier,omitempty"`
	CleanNumber string             `protobuf:"bytes,6,opt,name=clean_number,json=cleanNumber,proto3" json:"clean_number,omitempty"`
}

func (x *CheckPhoneResponse) Reset() {
	*x = CheckPhoneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPhoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPhoneResponse) ProtoMessage() {}

func (x *CheckPhoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPhoneResponse.ProtoReflect.Descriptor instead.
func (*CheckPhoneResponse) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{12}
}

func (x *CheckPhoneResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *CheckPhoneResponse) GetReason() PhoneInvalidReason {
	if x != nil {
		return x.Reason
	}
	return PhoneInvalidReason_PHONE_INVALID_REASON_UNSPECIFIED
}

func (x *CheckPhoneResponse) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CheckPhoneResponse) GetLineType() PhoneLineType {
	if x != nil {
		return x.LineType
	}
	return PhoneLineType_PHONE_LINE_TYPE_UNSPECIFIED
}

func (x *CheckPhoneResponse) GetCarrier() string {
	if x != nil {
		return x.Carrier
	}
	return ""
}

func (x *CheckPhoneResponse) GetCleanNumber() string {
	if x != nil {
		return x.CleanNumber
	}
	return ""
}

type CompanySize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeesMin int32 `protobuf:"varint,1,opt,name=employees_min,json=employeesMin,proto3" json:"employees_min,omitempty"`
	EmployeesMax int32 `protobuf:"varint,2,opt,name=employees_max,json=employeesMax,proto3" json:"employees_max,omitempty"`
}

func (x *CompanySize) Reset() {
	*x = CompanySize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanySize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanySize) ProtoMessage() {}

func (x *CompanySize) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanySize.ProtoReflect.Descriptor instead.
func (*CompanySize) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{13}
}

func (x *CompanySize) GetEmployeesMin() int32 {
	if x != nil {
		return x.EmployeesMin
	}
	return 0
}

func (x *CompanySize) GetEmployeesMax() int32 {
	if x != nil {
		return x.EmployeesMax
	}
	return 0
}

type CompanyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Industry    string       `protobuf:"bytes,2,opt,name=industry,proto3" json:"industry,omitempty"`
	CompanySize *CompanySize `protobuf:"bytes,3,opt,name=company_size,json=companySize,proto3" json:"company_size,omitempty"`
}

func (x *CompanyData) Reset() {
	*x = CompanyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_userwatch_public_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyData) ProtoMessage() {}

func (x *CompanyData) ProtoReflect() protoreflect.Message {
	mi := &file_userwatch_public_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyData.ProtoReflect.Descriptor instead.
func (*CompanyData) Descriptor() ([]byte, []int) {
	return file_userwatch_public_proto_rawDescGZIP(), []int{14}
}

func (x *CompanyData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompanyData) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *CompanyData) GetCompanySize() *CompanySize {
	if x != nil {
		return x.CompanySize
	}
	return nil
}

var File_userwatch_public_proto protoreflect.FileDescriptor

var file_userwatch_public_proto_rawDesc = []byte{
	0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x05, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x75, 0x77, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61,
	0x67, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x70, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x70, 0x6e, 0x12, 0x24,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x73, 0x55, 0x73, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x75, 0x77, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x67, 0x65,
	0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75,
	0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x67, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x75,
	0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x4c, 0x0a,
	0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x04,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x15,
	0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x2c, 0x0a,
	0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x6c, 0x61, 0x67, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x89, 0x03, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x75, 0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x49, 0x0a, 0x1b,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x0f, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x75,
	0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x31, 0x0a,
	0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x69,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x22, 0xe5, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x0d,
	0x67, 0x65, 0x6f, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x61, 0x74, 0x6c, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61,
	0x74, 0x4c, 0x6e, 0x67, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x49, 0x70, 0x4c, 0x61, 0x74, 0x6c, 0x6e,
	0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x65, 0x6f, 0x49, 0x70, 0x43, 0x69, 0x74,
	0x79, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x65, 0x6f, 0x5f, 0x69, 0x70, 0x5f, 0x73, 0x75, 0x62, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x65, 0x6f,
	0x49, 0x70, 0x53, 0x75, 0x62, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x67,
	0x65, 0x6f, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x49, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x72, 0x65, 0x22, 0x42, 0x0a, 0x06, 0x4c, 0x61, 0x74, 0x4c,
	0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xce, 0x01, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x18, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0c, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc2, 0x01,
	0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x75, 0x77, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x22, 0x39, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x64, 0x22, 0xf4, 0x01,
	0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x75, 0x77, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x22, 0x76, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x77, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x2a, 0x98, 0x05, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54,
	0x45, 0x4d, 0x50, 0x54, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12,
	0x20, 0x0a, 0x1c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x10,
	0x04, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x5f, 0x4f,
	0x46, 0x46, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x45, 0x45, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x46,
	0x46, 0x45, 0x52, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x09, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x0d, 0x12,
	0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x10, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x47, 0x45,
	0x5f, 0x56, 0x49, 0x53, 0x49, 0x54, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x14,
	0x2a, 0xa1, 0x01, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45,
	0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x55, 0x54, 0x43, 0x4f,
	0x4d, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54,
	0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x4f, 0x46,
	0x46, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45,
	0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d,
	0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x06, 0x2a, 0x90, 0x05, 0x0a, 0x08, 0x46, 0x6c, 0x61, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x48,
	0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x55, 0x53, 0x50, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52,
	0x4f, 0x4d, 0x49, 0x53, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x52, 0x45, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x55, 0x46, 0x46, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x44,
	0x45, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x53,
	0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x06, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x55,
	0x50, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x55, 0x53, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x5f, 0x42, 0x4f, 0x54, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x50, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53,
	0x54, 0x45, 0x44, 0x5f, 0x49, 0x50, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4c, 0x41, 0x43,
	0x4b, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x0c,
	0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x4f, 0x4d, 0x49, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x53, 0x50,
	0x4f, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x10, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x50, 0x4e, 0x10, 0x11, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x52, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x13, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x54, 0x48, 0x49, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x15, 0x12, 0x18,
	0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x16,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x19, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x5f,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x1a, 0x2a, 0x71, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xa6, 0x01, 0x0a, 0x0b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x4b, 0x54,
	0x4f, 0x50, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x42, 0x4f, 0x54, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x42, 0x41, 0x44, 0x42, 0x4f, 0x54, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x05, 0x2a, 0x99, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x41, 0x55, 0x54, 0x48, 0x4e,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48,
	0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x41,
	0x49, 0x4c, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x53, 0x59, 0x10, 0x04, 0x2a,
	0xd0, 0x01, 0x0a, 0x12, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x01, 0x12, 0x27, 0x0a,
	0x23, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4f, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x10, 0x04, 0x2a, 0xb5, 0x01, 0x0a, 0x09, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x41, 0x4e, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x44, 0x55, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x46, 0x50, 0x10, 0x06, 0x2a, 0xd9, 0x01, 0x0a, 0x0d, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x4e,
	0x44, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x48, 0x4f, 0x4e, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x50, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x49, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x2a, 0xfb, 0x01, 0x0a, 0x12, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x20, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x50,
	0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x4f, 0x49, 0x50,
	0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x10, 0x05, 0x2a, 0x5e, 0x0a, 0x0c, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x55, 0x4c, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x55, 0x4c, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x4e, 0x55, 0x4c, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x52,
	0x55, 0x45, 0x10, 0x02, 0x42, 0x31, 0x0a, 0x0f, 0x61, 0x69, 0x2e, 0x75, 0x70, 0x6f, 0x6c, 0x6c,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x07, 0x2f, 0x75, 0x70, 0x6f, 0x6c,
	0x6c, 0x6f, 0xa2, 0x02, 0x07, 0x55, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0xba, 0x02, 0x08, 0x55,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_userwatch_public_proto_rawDescOnce sync.Once
	file_userwatch_public_proto_rawDescData = file_userwatch_public_proto_rawDesc
)

func file_userwatch_public_proto_rawDescGZIP() []byte {
	file_userwatch_public_proto_rawDescOnce.Do(func() {
		file_userwatch_public_proto_rawDescData = protoimpl.X.CompressGZIP(file_userwatch_public_proto_rawDescData)
	})
	return file_userwatch_public_proto_rawDescData
}

var file_userwatch_public_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_userwatch_public_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_userwatch_public_proto_goTypes = []interface{}{
	(EventType)(0),                      // 0: uwproto.EventType
	(Outcome)(0),                        // 1: uwproto.Outcome
	(FlagType)(0),                       // 2: uwproto.FlagType
	(AddressType)(0),                    // 3: uwproto.AddressType
	(DeviceClass)(0),                    // 4: uwproto.DeviceClass
	(ChallengeType)(0),                  // 5: uwproto.ChallengeType
	(EmailInvalidReason)(0),             // 6: uwproto.EmailInvalidReason
	(EmailType)(0),                      // 7: uwproto.EmailType
	(PhoneLineType)(0),                  // 8: uwproto.PhoneLineType
	(PhoneInvalidReason)(0),             // 9: uwproto.PhoneInvalidReason
	(NullableBool)(0),                   // 10: uwproto.NullableBool
	(*AnalysisResponse)(nil),            // 11: uwproto.AnalysisResponse
	(*EventResponse)(nil),               // 12: uwproto.EventResponse
	(*Flag)(nil),                        // 13: uwproto.Flag
	(*Flags)(nil),                       // 14: uwproto.Flags
	(*UserInfo)(nil),                    // 15: uwproto.UserInfo
	(*PhysicalAddress)(nil),             // 16: uwproto.PhysicalAddress
	(*DeviceInfo)(nil),                  // 17: uwproto.DeviceInfo
	(*GeoInfo)(nil),                     // 18: uwproto.GeoInfo
	(*LatLng)(nil),                      // 19: uwproto.LatLng
	(*Event)(nil),                       // 20: uwproto.Event
	(*CheckEmailResponse)(nil),          // 21: uwproto.CheckEmailResponse
	(*CheckPasswordResponse)(nil),       // 22: uwproto.CheckPasswordResponse
	(*CheckPhoneResponse)(nil),          // 23: uwproto.CheckPhoneResponse
	(*CompanySize)(nil),                 // 24: uwproto.CompanySize
	(*CompanyData)(nil),                 // 25: uwproto.CompanyData
	nil,                                 // 26: uwproto.UserInfo.CustomerSuppliedValuesEntry
	(*timestamppb.Timestamp)(nil),       // 27: google.protobuf.Timestamp
	(*postaladdress.PostalAddress)(nil), // 28: google.type.PostalAddress
}
var file_userwatch_public_proto_depIdxs = []int32{
	1,  // 0: uwproto.AnalysisResponse.action:type_name -> uwproto.Outcome
	13, // 1: uwproto.AnalysisResponse.flags:type_name -> uwproto.Flag
	15, // 2: uwproto.AnalysisResponse.user_info:type_name -> uwproto.UserInfo
	17, // 3: uwproto.AnalysisResponse.device_info:type_name -> uwproto.DeviceInfo
	18, // 4: uwproto.AnalysisResponse.geo_info:type_name -> uwproto.GeoInfo
	5,  // 5: uwproto.AnalysisResponse.supported_challenges:type_name -> uwproto.ChallengeType
	0,  // 6: uwproto.AnalysisResponse.event_type:type_name -> uwproto.EventType
	21, // 7: uwproto.AnalysisResponse.email_analysis:type_name -> uwproto.CheckEmailResponse
	23, // 8: uwproto.AnalysisResponse.phone_analysis:type_name -> uwproto.CheckPhoneResponse
	2,  // 9: uwproto.Flag.type:type_name -> uwproto.FlagType
	27, // 10: uwproto.Flag.first_flagged:type_name -> google.protobuf.Timestamp
	27, // 11: uwproto.Flag.most_recently_flagged:type_name -> google.protobuf.Timestamp
	27, // 12: uwproto.Flag.ignored_until:type_name -> google.protobuf.Timestamp
	13, // 13: uwproto.Flags.flags:type_name -> uwproto.Flag
	26, // 14: uwproto.UserInfo.customer_supplied_values:type_name -> uwproto.UserInfo.CustomerSuppliedValuesEntry
	16, // 15: uwproto.UserInfo.addresses:type_name -> uwproto.PhysicalAddress
	3,  // 16: uwproto.PhysicalAddress.type:type_name -> uwproto.AddressType
	28, // 17: uwproto.PhysicalAddress.address:type_name -> google.type.PostalAddress
	4,  // 18: uwproto.DeviceInfo.device_class:type_name -> uwproto.DeviceClass
	27, // 19: uwproto.DeviceInfo.last_used:type_name -> google.protobuf.Timestamp
	19, // 20: uwproto.GeoInfo.geo_ip_latlng:type_name -> uwproto.LatLng
	27, // 21: uwproto.GeoInfo.last_here:type_name -> google.protobuf.Timestamp
	0,  // 22: uwproto.Event.event_type_enum:type_name -> uwproto.EventType
	27, // 23: uwproto.Event.timestamp:type_name -> google.protobuf.Timestamp
	6,  // 24: uwproto.CheckEmailResponse.reason:type_name -> uwproto.EmailInvalidReason
	7,  // 25: uwproto.CheckEmailResponse.email_type:type_name -> uwproto.EmailType
	25, // 26: uwproto.CheckEmailResponse.company:type_name -> uwproto.CompanyData
	9,  // 27: uwproto.CheckPhoneResponse.reason:type_name -> uwproto.PhoneInvalidReason
	8,  // 28: uwproto.CheckPhoneResponse.line_type:type_name -> uwproto.PhoneLineType
	24, // 29: uwproto.CompanyData.company_size:type_name -> uwproto.CompanySize
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_userwatch_public_proto_init() }
func file_userwatch_public_proto_init() {
	if File_userwatch_public_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_userwatch_public_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_public_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_public_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_public_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_public_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_public_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_public_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_public_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_public_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatLng); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_public_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_public_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_public_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_public_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPhoneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_public_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanySize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_userwatch_public_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_userwatch_public_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Event_EventTypeEnum)(nil),
		(*Event_CustomerDefinedEventType)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userwatch_public_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_userwatch_public_proto_goTypes,
		DependencyIndexes: file_userwatch_public_proto_depIdxs,
		EnumInfos:         file_userwatch_public_proto_enumTypes,
		MessageInfos:      file_userwatch_public_proto_msgTypes,
	}.Build()
	File_userwatch_public_proto = out.File
	file_userwatch_public_proto_rawDesc = nil
	file_userwatch_public_proto_goTypes = nil
	file_userwatch_public_proto_depIdxs = nil
}
