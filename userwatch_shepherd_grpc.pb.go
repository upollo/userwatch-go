// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: userwatch_shepherd.proto

package upollo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shepherd_Track_FullMethodName           = "/uwproto.Shepherd/Track"
	Shepherd_Verify_FullMethodName          = "/uwproto.Shepherd/Verify"
	Shepherd_CreateChallenge_FullMethodName = "/uwproto.Shepherd/CreateChallenge"
	Shepherd_VerifyChallenge_FullMethodName = "/uwproto.Shepherd/VerifyChallenge"
	Shepherd_ApproveDevice_FullMethodName   = "/uwproto.Shepherd/ApproveDevice"
	Shepherd_ReportDevice_FullMethodName    = "/uwproto.Shepherd/ReportDevice"
	Shepherd_GetDeviceList_FullMethodName   = "/uwproto.Shepherd/GetDeviceList"
)

// ShepherdClient is the client API for Shepherd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShepherdClient interface {
	// Inform Userwatch of an event in your application.
	//
	// Include any UserInfo you have, or an empty UserInfo if you have none.
	Track(ctx context.Context, in *TrackEventRequest, opts ...grpc.CallOption) (*AnalysisResponse, error)
	// Access the assessment of a user for whom an event was previously
	// registered with Userwatch via a track(UserInfo, EventType) call from
	// your client application.
	//
	// At this point you can also attach any additional UserInfo your server
	// has which your client might not have had available.
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*AnalysisResponse, error)
	// Verifying Challenge Responses
	CreateChallenge(ctx context.Context, in *CreateChallengeRequest, opts ...grpc.CallOption) (*CreateChallengeResponse, error)
	VerifyChallenge(ctx context.Context, in *ChallengeVerificationRequest, opts ...grpc.CallOption) (*ChallengeVerificationResponse, error)
	// User Management
	ApproveDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
	ReportDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
	GetDeviceList(ctx context.Context, in *DeviceListRequest, opts ...grpc.CallOption) (*DeviceListResponse, error)
}

type shepherdClient struct {
	cc grpc.ClientConnInterface
}

func NewShepherdClient(cc grpc.ClientConnInterface) ShepherdClient {
	return &shepherdClient{cc}
}

func (c *shepherdClient) Track(ctx context.Context, in *TrackEventRequest, opts ...grpc.CallOption) (*AnalysisResponse, error) {
	out := new(AnalysisResponse)
	err := c.cc.Invoke(ctx, Shepherd_Track_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shepherdClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*AnalysisResponse, error) {
	out := new(AnalysisResponse)
	err := c.cc.Invoke(ctx, Shepherd_Verify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shepherdClient) CreateChallenge(ctx context.Context, in *CreateChallengeRequest, opts ...grpc.CallOption) (*CreateChallengeResponse, error) {
	out := new(CreateChallengeResponse)
	err := c.cc.Invoke(ctx, Shepherd_CreateChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shepherdClient) VerifyChallenge(ctx context.Context, in *ChallengeVerificationRequest, opts ...grpc.CallOption) (*ChallengeVerificationResponse, error) {
	out := new(ChallengeVerificationResponse)
	err := c.cc.Invoke(ctx, Shepherd_VerifyChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shepherdClient) ApproveDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, Shepherd_ApproveDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shepherdClient) ReportDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, Shepherd_ReportDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shepherdClient) GetDeviceList(ctx context.Context, in *DeviceListRequest, opts ...grpc.CallOption) (*DeviceListResponse, error) {
	out := new(DeviceListResponse)
	err := c.cc.Invoke(ctx, Shepherd_GetDeviceList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShepherdServer is the server API for Shepherd service.
// All implementations must embed UnimplementedShepherdServer
// for forward compatibility
type ShepherdServer interface {
	// Inform Userwatch of an event in your application.
	//
	// Include any UserInfo you have, or an empty UserInfo if you have none.
	Track(context.Context, *TrackEventRequest) (*AnalysisResponse, error)
	// Access the assessment of a user for whom an event was previously
	// registered with Userwatch via a track(UserInfo, EventType) call from
	// your client application.
	//
	// At this point you can also attach any additional UserInfo your server
	// has which your client might not have had available.
	Verify(context.Context, *VerifyRequest) (*AnalysisResponse, error)
	// Verifying Challenge Responses
	CreateChallenge(context.Context, *CreateChallengeRequest) (*CreateChallengeResponse, error)
	VerifyChallenge(context.Context, *ChallengeVerificationRequest) (*ChallengeVerificationResponse, error)
	// User Management
	ApproveDevice(context.Context, *DeviceRequest) (*DeviceResponse, error)
	ReportDevice(context.Context, *DeviceRequest) (*DeviceResponse, error)
	GetDeviceList(context.Context, *DeviceListRequest) (*DeviceListResponse, error)
	mustEmbedUnimplementedShepherdServer()
}

// UnimplementedShepherdServer must be embedded to have forward compatible implementations.
type UnimplementedShepherdServer struct {
}

func (UnimplementedShepherdServer) Track(context.Context, *TrackEventRequest) (*AnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Track not implemented")
}
func (UnimplementedShepherdServer) Verify(context.Context, *VerifyRequest) (*AnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedShepherdServer) CreateChallenge(context.Context, *CreateChallengeRequest) (*CreateChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChallenge not implemented")
}
func (UnimplementedShepherdServer) VerifyChallenge(context.Context, *ChallengeVerificationRequest) (*ChallengeVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyChallenge not implemented")
}
func (UnimplementedShepherdServer) ApproveDevice(context.Context, *DeviceRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveDevice not implemented")
}
func (UnimplementedShepherdServer) ReportDevice(context.Context, *DeviceRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDevice not implemented")
}
func (UnimplementedShepherdServer) GetDeviceList(context.Context, *DeviceListRequest) (*DeviceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceList not implemented")
}
func (UnimplementedShepherdServer) mustEmbedUnimplementedShepherdServer() {}

// UnsafeShepherdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShepherdServer will
// result in compilation errors.
type UnsafeShepherdServer interface {
	mustEmbedUnimplementedShepherdServer()
}

func RegisterShepherdServer(s grpc.ServiceRegistrar, srv ShepherdServer) {
	s.RegisterService(&Shepherd_ServiceDesc, srv)
}

func _Shepherd_Track_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShepherdServer).Track(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shepherd_Track_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShepherdServer).Track(ctx, req.(*TrackEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shepherd_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShepherdServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shepherd_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShepherdServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shepherd_CreateChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShepherdServer).CreateChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shepherd_CreateChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShepherdServer).CreateChallenge(ctx, req.(*CreateChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shepherd_VerifyChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShepherdServer).VerifyChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shepherd_VerifyChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShepherdServer).VerifyChallenge(ctx, req.(*ChallengeVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shepherd_ApproveDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShepherdServer).ApproveDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shepherd_ApproveDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShepherdServer).ApproveDevice(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shepherd_ReportDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShepherdServer).ReportDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shepherd_ReportDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShepherdServer).ReportDevice(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shepherd_GetDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShepherdServer).GetDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shepherd_GetDeviceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShepherdServer).GetDeviceList(ctx, req.(*DeviceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shepherd_ServiceDesc is the grpc.ServiceDesc for Shepherd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shepherd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uwproto.Shepherd",
	HandlerType: (*ShepherdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Track",
			Handler:    _Shepherd_Track_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Shepherd_Verify_Handler,
		},
		{
			MethodName: "CreateChallenge",
			Handler:    _Shepherd_CreateChallenge_Handler,
		},
		{
			MethodName: "VerifyChallenge",
			Handler:    _Shepherd_VerifyChallenge_Handler,
		},
		{
			MethodName: "ApproveDevice",
			Handler:    _Shepherd_ApproveDevice_Handler,
		},
		{
			MethodName: "ReportDevice",
			Handler:    _Shepherd_ReportDevice_Handler,
		},
		{
			MethodName: "GetDeviceList",
			Handler:    _Shepherd_GetDeviceList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userwatch_shepherd.proto",
}
